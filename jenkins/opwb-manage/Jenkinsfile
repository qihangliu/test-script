pipeline {
    // 统一在顶层定义全局构建环境
    agent {
        docker {
            image 'maven:3-eclipse-temurin-8'
            args '-u root:root -v maven-m2-cache:/root/.m2/repository'
        }
    }

    stages {
        // ====================================================================
        //  阶段 1: 清理工作区
        // ====================================================================
        stage('Clean Workspace') {
            steps {
                echo 'INFO: 在 root 容器内清理主工作区...'
                // 使用 rm -rf 是因为 cleanWs() 会因权限问题失败
                sh 'rm -rf ./* ./.??*'
                echo 'SUCCESS: 工作区清理完成。'
            }
        }

        // ====================================================================
        //  阶段 2: 检出代码
        // ====================================================================
        stage('Checkout SCM') {
            steps {
                echo 'INFO: 开始从 Gitee 仓库检出 opwb-management 项目...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-management.git',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                    ]]
                ])
                // 将当前工作区标记为 Git 的安全目录
                sh "git config --global --add safe.directory ${env.WORKSPACE}"
                echo 'SUCCESS: 代码检出完成。'
            }
        }

        // ====================================================================
        //  阶段 3: 构建与测试
        // ====================================================================
        stage('Build') {
            steps {
                configFileProvider([configFile(fileId: 'maven-aliyun-settings', variable: 'MAVEN_SETTINGS')]) {
                    echo "INFO: 成功加载 Jenkins 全局 Maven 配置文件 (ID: maven-aliyun-settings)..."
                    echo 'INFO: 开始执行 Maven 构建 (mvn clean install)...'
                    sh "mvn -s ${MAVEN_SETTINGS} -T 8 clean install -DskipTests"
                    echo 'SUCCESS: Maven 构建完成。'
                }
            }
        }

        // ====================================================================
        //  阶段 4: 归档产物
        // ====================================================================
        stage('Archive') {
            steps {
                script {
                    echo 'INFO: 开始归档构建产物...'

                    // 1. 动态查找构建产物
                    def files = findFiles(glob: 'target/*.jar')
                    if (files.length == 0) {
                        error "错误：在 target/ 目录中未找到任何 .jar 文件，无法归档！"
                    }
                    def jarFile = files[0]

                    // 2. 准备归档目录 (share/JOB_NAME/JOB_NAME-TIMESTAMP)
                    def timestamp = new Date().format('yy-MM-dd_HH-mm-ss', TimeZone.getTimeZone('Asia/Shanghai'))
                    def shareRoot = "/var/jenkins_home/share"
                    def targetDir = "${shareRoot}/${env.JOB_NAME}/${env.JOB_NAME}-${timestamp}"

                    // 3. 执行归档 Shell 脚本
                    sh """
                        set -e
                        echo "[1/3] 正在创建共享归档目录: ${targetDir}"
                        mkdir -p "${targetDir}"

                        echo "[2/3] 正在归档 Git 提交日志..."
                        git log --since="7 days ago" --no-merges --pretty=format:"%h - %an, %ar : %s" > "${targetDir}/git_commit_log.txt"

                        echo "[3/3] 正在拷贝 JAR 包: ${jarFile.name} ..."
                        cp ${jarFile.path} "${targetDir}/"

                        cat <<EOF

========================================================================
✅ 构建产物已成功归档至共享目录!

   任务名称: ${env.JOB_NAME}

   Windows 可通过以下路径访问：
   \\\\\\\\10.189.189.245\\\\share\\\\${env.JOB_NAME}\\\\${env.JOB_NAME}-${timestamp}
========================================================================

EOF
                    """

                    // 4. Jenkins 内置归档
                    echo "INFO: 正在归档 ${jarFile.name} 到 Jenkins 本身..."
                    archiveArtifacts artifacts: jarFile.path, fingerprint: true

                    echo 'SUCCESS: 所有归档操作完成。'
                }
            }
        }
    }
}
