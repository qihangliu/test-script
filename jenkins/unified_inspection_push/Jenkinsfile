pipeline {
    agent any
    stages {
        // 阶段一：从代码库拉取最新的代码
        stage('Checkout') {
            steps {
                script {
                    retry(count: 3) {
                        cleanWs()
                        git branch: 'dev',
                            credentialsId: '463e6b72-63de-4775-8ca4-01f465f4f33e',
                            url: 'https://gitee.com/changyunhuizhi/opwb-automation.git'
                    }
                }
            }
        }
        
        // 阶段二：运行推送脚本
        stage('Run Push Notification Task') {
            steps {
                script {
                    try {
                        docker.image('testenv:3.0-250825').inside("--volume ${WORKSPACE}:/app -w /app") {
                            // 关键: returnStatus: true 会让 sh 返回脚本的退出码
                            def statusCode = sh(script: 'python ./utils/monitor/unified_inspection_push.py', returnStatus: true)
                            
                            // 只判断是否成功 (退出码为0)
                            if (statusCode == 0) {
                                echo "脚本执行成功：推送已完成。内部任务的状态请查看日志。"
                            } else {
                                // 任何非0的退出码都表示推送失败或环境问题
                                error("严重错误：推送通知或环境检查失败，退出码为 ${statusCode}。构建将标记为失败。")
                            }
                        }
                    } catch (any) {
                        // 捕获 Docker 或 sh 命令本身的执行错误
                        error("Jenkins 步骤执行时发生致命错误: ${any.message}")
                    }
                }
            }
        }
    }
}
