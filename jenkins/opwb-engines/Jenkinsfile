// jenkinsfile
pipeline {
    agent {
        docker {
            image 'maven:3-eclipse-temurin-21'
            args '-u root:root -v maven-m2-cache:/root/.m2/repository'
        }
    }

    environment {
        // 定义Maven settings.xml的本地路径
        SETTINGS_XML = "${WORKSPACE}/custom-settings.xml"
    }

    stages {
        // ====================================================================
        // 阶段一：准备 Maven 配置
        // ====================================================================
        stage('Prepare Settings') {
            steps {
                script {
                    def settingsXml = '''
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                              https://maven.apache.org/xsd/settings-1.0.0.xsd ">
  <mirrors>
    <mirror>
      <id>aliyunmaven</id>
      <mirrorOf>central</mirrorOf>
      <name>Aliyun Maven</name>
      <url>https://maven.aliyun.com/repository/public </url>
    </mirror>
    <mirror>
      <id>maven-central</id>
      <mirrorOf>central</mirrorOf>
      <name>Maven Central</name>
      <url>https://repo.maven.apache.org/maven2 </url>
    </mirror>
  </mirrors>
</settings>
'''
                    writeFile file: SETTINGS_XML, text: settingsXml
                }
            }
        }

        // ====================================================================
        // 阶段二：构建 lts（仅在有变更时）
        // ====================================================================
        stage('Build Dependency: lts') {
            steps {
                dir('lts-workspace') {
                    echo '检出 light-task-scheduler...'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/master']],
                        userRemoteConfigs: [[
                            url: 'https://gitee.com/changyunhuizhi/light-task-scheduler.git ',
                            credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                        ]]
                    ])

                    script {
                        // 标记安全目录
                        sh "git config --global --add safe.directory ${env.WORKSPACE}/lts-workspace"

                        // 获取最新 commit hash
                        def currentHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                        def hashFile = "${env.JENKINS_HOME}/lts-commit-hash.txt"
                        def lastHash = fileExists(hashFile) ? readFile(hashFile).trim() : ""

                        if (currentHash != lastHash) {
                            echo "检测到 lts 有新提交，执行 mvn install..."
                            sh "mvn -s ${SETTINGS_XML} clean install -DskipTests"
                            writeFile file: hashFile, text: currentHash
                        } else {
                            echo "lts 代码无变化，跳过构建，直接使用缓存的 .m2 依赖"
                        }
                    }
                }
            }
        }

        // ====================================================================
        // 阶段三：构建主项目
        // ====================================================================
        stage('Build Main Project') {
            steps {
                echo '检出 opwb-engines 主项目...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/workbench-2023']],
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-engines.git ',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                    ]]
                ])

                sh "git config --global --add safe.directory ${env.WORKSPACE}"

                echo '正在执行 Maven 构建...'
                sh "mvn -s ${SETTINGS_XML} clean package -DskipTests -U"
            }
        }

        // ====================================================================
        // 阶段四：归档到共享目录
        // ====================================================================
        stage('Archive to Share') {
            steps {
                script {
                    def timestamp = new Date().format('yy-MM-dd_HH-mm-ss', TimeZone.getTimeZone('Asia/Shanghai'))
                    def shareRoot = "${env.JENKINS_HOME}/share"
                    def targetDir = "${shareRoot}/${env.JOB_NAME}-${timestamp}"

                    sh """
                        set -e
                        mkdir -p "${targetDir}/devops-jobtracker"
                        mkdir -p "${targetDir}/devops-core"
                        mkdir -p "${targetDir}/devops-tasktracker"

                        git log --since="7 days ago" --no-merges --pretty=format:"%h - %an, %ar : %s" > "${targetDir}/git_commit_log.txt"

                        cp "${env.WORKSPACE}/devops-jobtracker/target/devops-jobtracker-1.0-SNAPSHOT.jar" "${targetDir}/devops-jobtracker/"
                        cp "${env.WORKSPACE}/devops-core/target/devops-core-1.0-SNAPSHOT-exec.jar" "${targetDir}/devops-core/"
                        cp "${env.WORKSPACE}/devops-tasktracker/target/devops-tasktracker-1.0-SNAPSHOT.jar" "${targetDir}/devops-tasktracker/"

                        cat <<EOF
--------------------------------------------------------
文件已成功归档
Windows 可通过以下路径访问：
\\\\\\\\10.189.189.245\\\\share\\\\${env.JOB_NAME}-${timestamp}
--------------------------------------------------------
EOF
                    """
                }
            }
        }
    }

    post {
        always {
            echo '构建已结束。'
        }
    }
}
