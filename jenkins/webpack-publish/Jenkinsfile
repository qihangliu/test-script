// Jenkinsfile (最终优化版)
pipeline {
    // ====================================================================
    // 1. 定义构建环境（基于 Node.js 的 Docker 镜像）
    // ====================================================================
    agent {
        docker {
            image 'node:14.15.0'
            // 挂载命名卷 (named volumes) 来持久化缓存，这是 Docker 推荐的最佳实践
            // - npm-cache: 用于缓存 npm 下载的包
            // - webpack-cache: 用于持久化 Webpack 的文件系统缓存
            args '-u root:root -v npm-cache:/root/.npm -v webpack-cache:/workspace/node_modules/.cache'
        }
    }

    stages {
        // ====================================================================
        // 阶段：检出代码
        // ====================================================================
        stage('Checkout') {
            steps {
                echo 'INFO: 正在检出代码 (启用浅克隆)...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/shijiaxuan-pool']],
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-web.git',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                    ]],
                    // 浅克隆，只拉取最近一次提交，大幅加速代码检出
                    extensions: [
                        [$class: 'CloneOption', shallow: true, depth: 1, timeout: 60]
                    ]
                ])
            }
        }

        // ====================================================================
        // 阶段：安装依赖
        // ====================================================================
        stage('Install Dependencies') {
            steps {
                echo 'INFO: 设置 NPM 使用淘宝镜像源，加快依赖下载...'
                sh 'npm config set registry https://registry.npmmirror.com'
                // 关键优化：使用 --prefer-offline 优先从缓存安装，跳过不必要的检查
                sh 'npm install --prefer-offline --no-audit --no-fund'

                echo 'INFO: 更新 browserslist 数据库以消除构建警告...'
                // 这个命令会更新 caniuse-lite 数据库，让后续 build 过程不再打印警告
                sh 'npx browserslist@latest --update-db'
            }
        }

        // ====================================================================
        // 阶段：编译项目
        // ====================================================================
        stage('Build') {
            steps {
                echo 'INFO: 清理旧的构建产物，确保环境干净...'
                sh 'rm -rf dist'
                sh 'rm -f dist.zip'

                // 关键修复：根据服务器 24G 内存的配置，将 Node 内存上限提升至 20GB
                // 这是防止大型项目在编译时内存溢出的最关键一步
                withEnv(['NODE_OPTIONS=--max-old-space-size=20480']) {
                    echo "INFO: 使用 NODE_OPTIONS=${env.NODE_OPTIONS} 编译项目..."
                    // 关键优化：跳过 lint 检查，专注于编译任务
                    sh 'NODE_ENV=production npm run build -- --no-lint'
                }
            }
        }

        // ====================================================================
        // 阶段：打包产物
        // ====================================================================
        stage('Package Artifact') {
            steps {
                echo 'INFO: 将 dist 目录的内容打包成 dist.zip...'
                dir('dist') {
                    // 关键修复：进入 dist 目录再打包，确保 zip 包内没有顶层 dist 目录
                    sh 'zip -qr ../dist.zip .'
                }
                // 将产物归档到 Jenkins，方便后续追溯
                archiveArtifacts artifacts: 'dist.zip', followSymlinks: false
            }
        }

        // ====================================================================
        // 阶段：部署到测试环境
        // ====================================================================
        stage('Deploy to Test') {
            steps {
                sshagent(credentials: ['ssh-key-for-test-server']) {
                    script {
                        def remoteUser = "root"
                        def remoteHost = "10.189.189.189"
                        def remoteWorkDir = "/data/server/opwbworkbench/webpack/"
                        def remoteHtmlDir = "/data/server/opwbworkbench/html"

                        echo "INFO: 传输 dist.zip 到测试服务器 ${remoteHost}..."
                        sh "scp -o StrictHostKeyChecking=no dist.zip ${remoteUser}@${remoteHost}:${remoteWorkDir}"

                        echo "INFO: 执行远程部署脚本..."
                        sh """
                            ssh -o StrictHostKeyChecking=no ${remoteUser}@${remoteHost} '
                                set -e

                                WORK_DIR="${remoteWorkDir}"
                                HTML_DIR="${remoteHtmlDir}"
                                DIST_ZIP="dist.zip"
                                TIMESTAMP=\$(date +"%Y%m%d%H%M%S")
                                BACKUP_FILE="html_backup_\${TIMESTAMP}.tar.gz"
                                MAX_BACKUPS=10

                                cd \$WORK_DIR

                                echo "--> 备份现有应用..."
                                tar -czf "\$BACKUP_FILE" -C "\$(dirname "\$HTML_DIR")" "\$(basename "\$HTML_DIR")"

                                echo "--> 清理旧备份..."
                                ls -1t html_backup_*.tar.gz 2>/dev/null | tail -n +\$((\$MAX_BACKUPS + 1)) | xargs -r rm -f

                                echo "--> 清空目标目录..."
                                rm -rf "\${HTML_DIR:?}"/*

                                echo "--> 解压新版本..."
                                unzip -q -o "\$DIST_ZIP" -d "\$HTML_DIR"

                                echo "--> 清理临时文件..."
                                rm "\$DIST_ZIP"

                                echo "✅ 部署完成。"
                            '
                        """
                    }
                }
            }
        }
    }

    // ====================================================================
    // 构建后操作
    // ====================================================================
    post {
        always {
            echo '构建流程已结束。'
        }
    }
}
