// Jenkinsfile
pipeline {
    // 1. 定义构建环境：使用我们自己的、预装了所有工具的自定义镜像
    agent {
        docker {
            // 使用你自己构建的、预装了 zip 的镜像
            image 'node:14.15.0'
            // 2. 缓存与权限控制
            // -u root:root : 强制容器以 root 用户运行
            // -v npm-cache... : 持久化 npm 缓存
            // -v webpack-cache... : 持久化 Webpack 构建缓存，路径已更新为工作区根目录
            args '-u root:root -v npm-cache:/root/.npm -v webpack-cache:/workspace/node_modules/.cache'
        }
    }

    stages {
        // ====================================================================
        //  阶段：检出代码
        // ====================================================================
        stage('Checkout') {
            steps {
                echo '正在检出代码到工作区根目录...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/shijiaxuan-pool']],
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-web.git',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                    ]],
                    // 优化：移除不必要的子目录检出
                    extensions: [
                        [$class: 'CloneOption', shallow: false, timeout: 60]
                    ]
                ])
            }
        }

        // ====================================================================
        //  阶段：安装依赖
        // ====================================================================
        stage('Install Dependencies') {
            steps {
                echo '正在配置 NPM 使用淘宝镜像源...'
                sh 'npm config set registry https://registry.npmmirror.com'
                
                echo '正在安装 NPM 依赖...'
                // 优化：使用 npm install 替代 npm ci，以利用现有的 node_modules 目录，大幅提升后续构建速度
                sh 'npm install'
                sh 'npm rebuild core-js vue-demi ant-design-vue'
            }
        }

        // ====================================================================
        //  阶段：编译项目
        // ====================================================================
        stage('Build') {
            steps {
                // 优化：在编译前，先清理旧的 dist 目录
                echo '正在清理旧的 dist 目录...'
                sh 'rm -rf dist'

                withEnv(['NODE_OPTIONS=--max-old-space-size=8192']) {
                    echo "正在使用 NODE_OPTIONS=${env.NODE_OPTIONS} 进行编译..."
                    sh 'npm run build'
                }
            }
        }

        // ====================================================================
        //  阶段：打包产物
        // ====================================================================
        stage('Package Artifact') {
            steps {
                echo '正在将 dist 目录的内容打包为 dist.zip...'
                // 优化：进入 dist 目录，直接打包其内容，使 zip 包不包含 dist 父目录
                dir('dist') {
                    sh 'zip -r ../dist.zip .'
                }
                archiveArtifacts artifacts: 'dist.zip', followSymlinks: false
            }
        }

        // ====================================================================
        //  阶段：部署到测试环境
        // ====================================================================
        stage('Deploy to Test') {
            steps {
                sshagent(credentials: ['ssh-key-for-test-server']) {
                    script {
                        def remoteUser = "root"
                        def remoteHost = "10.189.189.189"
                        def remoteWorkDir = "/data/server/opwbworkbench/webpack/"
                        def remoteHtmlDir = "/data/server/opwbworkbench/html" // 目标 HTML 目录的绝对路径

                        echo "正在传输 dist.zip 到 ${remoteUser}@${remoteHost}:${remoteWorkDir}"
                        sh "scp -o StrictHostKeyChecking=no dist.zip ${remoteUser}@${remoteHost}:${remoteWorkDir}"

                        echo "正在执行远程部署..."
                        // 修复：使用单反斜杠 \ 来转义所有要留给 Shell 处理的 $ 符号
                        sh """
                            ssh -o StrictHostKeyChecking=no ${remoteUser}@${remoteHost} '
                                set -e
                                
                                # 定义变量
                                WORK_DIR="${remoteWorkDir}"
                                HTML_DIR="${remoteHtmlDir}"
                                DIST_ZIP="dist.zip"
                                TIMESTAMP=\$(date +"%Y%m%d%H%M%S")
                                BACKUP_FILE="html_backup_\${TIMESTAMP}.tar.gz"
                                MAX_BACKUPS=10

                                # 进入工作目录以执行备份和清理
                                cd \$WORK_DIR

                                echo "--> 正在备份 \$HTML_DIR..."
                                tar -czf "\$BACKUP_FILE" -C "\$(dirname "\$HTML_DIR")" "\$(basename "\$HTML_DIR")"
                                
                                echo "--> 正在清理旧备份，最多保留 \${MAX_BACKUPS} 个..."
                                ls -1t html_backup_*.tar.gz 2>/dev/null | tail -n +\$((\${MAX_BACKUPS} + 1)) | xargs -r rm -f

                                echo "--> 正在清空 \$HTML_DIR 目录..."
                                rm -rf "\${HTML_DIR:?}"/*

                                echo "--> 正在将 \$DIST_ZIP 直接解压到 \$HTML_DIR..."
                                unzip -q -o "\$DIST_ZIP" -d "\$HTML_DIR"

                                echo "--> 正在删除临时的 \$DIST_ZIP..."
                                rm "\$DIST_ZIP"

                                echo "✅ 部署完成！文件已直接更新至 \$HTML_DIR 目录。"
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo '构建已结束。'
        }
    }
}
