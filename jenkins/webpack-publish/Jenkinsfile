pipeline {
    // ====================================================================
    // 1. 定义构建环境
    // ====================================================================
    agent {
        docker {
            image 'node:14.15.0'
            // 关键修正：将缓存卷的名称与 Job 名称绑定，实现每个 Job 拥有独立的缓存
            args """
                -u root:root \
                -v npm-cache:/root/.npm \
                -v node-modules-cache-${env.JOB_NAME}:/var/jenkins_home/workspace/${env.JOB_NAME}/node_modules \
                -v build-cache-${env.JOB_NAME}:/var/jenkins_home/workspace/${env.JOB_NAME}/node_modules/.cache \
                --entrypoint=
            """
        }
    }

    stages {
        // ====================================================================
        // 阶段：检出代码
        // ====================================================================
        stage('Checkout') {
            steps {
                echo 'INFO: 正在检出代码 (使用完整克隆)...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/shijiaxuan-pool']],
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-web.git',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                    ]],
                    extensions: []
                ])
            }
        }

        // ====================================================================
        // 阶段：极速增量安装依赖
        // ====================================================================
        stage('Install Dependencies') {
            steps {
                sh '''
                    #!/bin/bash
                    set -e

                    echo "--> INFO: 正在开始极速增量安装..."
                    npm config set registry https://registry.npmmirror.com

                    CURRENT_CHECKSUM=$(md5sum package-lock.json | awk '{ print $1 }')
                    SAVED_CHECKSUM_FILE="node_modules/.lock-checksum"

                    if [ -f "$SAVED_CHECKSUM_FILE" ] && [ "$CURRENT_CHECKSUM" = "$(cat "$SAVED_CHECKSUM_FILE")" ]; then
                        echo "--> 成功: package-lock.json 未发生变化，跳过依赖安装。"
                    else
                        echo "--> INFO: package-lock.json 已发生变化，正在执行增量 'npm install'。"
                        npm install --no-audit --no-fund
                        echo "--> INFO: 正在为 package-lock.json 保存新的校验和。"
                        echo "$CURRENT_CHECKSUM" > "$SAVED_CHECKSUM_FILE"
                    fi
                '''
            }
        }

        // ====================================================================
        // 阶段：编译项目
        // ====================================================================
        stage('Build') {
            steps {
                echo 'INFO: 正在清理旧的构建产物...'
                sh 'rm -f dist.zip || true'

                // --- 注入优化配置并禁用 Lint ---
                script {
                    def originalConfig = readFile('vue.config.js')
                    // 修正注入逻辑：
                    // 在 .tap 函数中，使用 {...options, cacheDirectory: true} 的方式来安全地合并配置。
                    // 这样做可以确保即使原始的 options 是 undefined，代码也能正常工作。
                    def injectedCode = """
// START: Injected build optimization
const jsRule = config.module.rule('js');
if (jsRule) {
    console.log("✅ INFO: 已成功找到 'js' 规则，正在为 babel-loader 开启内置缓存...");
    jsRule.use('babel-loader')
        .tap(options => {
            // 修正：无论原始的 options 是否存在，都返回一个包含 cacheDirectory 的新对象
            return {
                ...options,
                cacheDirectory: true
            };
        });
    console.log("✅ INFO: babel-loader 缓存已成功启用。");
} else {
    console.log("❌ 警告: 未找到 'js' 规则，无法为 babel-loader 开启缓存。");
}
// END: Injected build optimization
"""
                    def modifiedConfig = originalConfig.replaceFirst(
                        java.util.regex.Pattern.quote('chainWebpack: config => {'),
                        "chainWebpack: config => {\n${injectedCode}"
                    )
                    modifiedConfig = modifiedConfig.replaceAll('lintOnSave:.*?,', 'lintOnSave: false,')

                    writeFile(file: 'vue.config.js', text: modifiedConfig)
                    echo "INFO: 已在内存中修改并写回 vue.config.js，并已禁用 Lint 和开启了 babel-loader 缓存。"
                }

                withEnv(['NODE_OPTIONS=--max-old-space-size=8192', 'BROWSERSLIST_IGNORE_OLD_DATA=true', 'BROWSERSLIST_UPDATE=false']) {
                    echo "INFO: 正在使用 NODE_OPTIONS=${env.NODE_OPTIONS} 进行编译..."
                    sh 'NODE_ENV=production npm run build'
                }
            }
        }

        // ====================================================================
        // 阶段：打包产物
        // ====================================================================
        stage('Package Artifact') {
            steps {
                echo 'INFO: 正在将 dist 目录打包为 dist.zip...'
                sh 'zip -qr dist.zip dist'
                archiveArtifacts artifacts: 'dist.zip', followSymlinks: false
            }
        }

        // ====================================================================
        // 阶段：部署到测试环境
        // ====================================================================
        stage('Deploy to Test') {
            steps {
                sshagent(credentials: ['ssh-key-for-test-server']) {
                    script {
                        def remoteUser = "root"
                        def remoteHost = "10.189.189.189"
                        def remoteWorkDir = "/data/server/opwbworkbench/webpack/"
                        def remoteHtmlDir = "/data/server/opwbworkbench/html"

                        echo "INFO: 正在传输 dist.zip 到测试服务器 ${remoteHost}..."
                        sh "scp -o StrictHostKeyChecking=no dist.zip ${remoteUser}@${remoteHost}:${remoteWorkDir}"

                        echo "INFO: 正在执行远程部署脚本..."
                        sh """
                            ssh -o StrictHostKeyChecking=no ${remoteUser}@${remoteHost} '
                                set -e

                                WORK_DIR="${remoteWorkDir}"
                                HTML_DIR="${remoteHtmlDir}"
                                DIST_ZIP="dist.zip"
                                TIMESTAMP=\$(date +"%Y%m%d%H%M%S")
                                BACKUP_FILE="html_backup_\${TIMESTAMP}.tar.gz"
                                MAX_BACKUPS=10

                                cd "\$WORK_DIR"

                                echo "--> 正在备份现有应用..."
                                tar -czf "\$BACKUP_FILE" -C "\$(dirname "\$HTML_DIR")" "\$(basename "\$HTML_DIR")"

                                echo "--> 正在清理旧备份..."
                                ls -1t html_backup_*.tar.gz 2>/dev/null | tail -n +\$((\$MAX_BACKUPS + 1)) | xargs -r rm -f

                                echo "--> 正在清空目标目录..."
                                rm -rf "\${HTML_DIR:?}"/*

                                echo "--> 正在解压新版本..."
                                unzip -q -o "\$DIST_ZIP" -d "\$WORK_DIR"

                                echo "--> 正在将解压后的 'dist' 目录内容移动到部署目标路径..."
                                mv "\$WORK_DIR"/dist/* "\$HTML_DIR"/

                                echo "--> 正在清理临时文件..."
                                rm "\$DIST_ZIP"
                                rmdir "\$WORK_DIR"/dist || true

                                echo "✅ 部署完成。"
                            '
                        """
                    }
                }
            }
        }
    }

    // ====================================================================
    // 构建后操作
    // ====================================================================
    post {
        always {
            echo '构建流程已结束。'
        }
    }
}