// Jenkinsfile
pipeline {
    // 1. 定义 Agent
    agent any

    // 2. 新增：定义定时触发器
    triggers {
        // H(10-20) 4 * * * 表示每天凌晨 4:10 至 4:20 之间，
        // 由 Jenkins 选择一个固定的随机分钟执行，以实现负载分散。
        cron('H(10-20) 4 * * *')
    }

    stages {
        // ====================================================================
        //  阶段 1: 清理工作区
        // ====================================================================
        stage('Clean Workspace') {
            steps {
                echo "INFO: 准备为构建 #${env.BUILD_NUMBER} 清理工作区..."
                cleanWs()
                echo "SUCCESS: 工作区清理完成。"
            }
        }

        // ====================================================================
        //  阶段 2: 检出代码
        // ====================================================================
        stage('Checkout SCM') {
            steps {
                script {
                    echo "INFO: 开始从 Gitee 仓库检出代码 (main 分支)..."
                    retry(count: 3) {
                        git branch: 'main',
                            credentialsId: '463e6b72-63de-4775-8ca4-01f465f4f33e',
                            url: 'https://gitee.com/changyunhuizhi/opwb-automation.git'
                    }
                    echo "SUCCESS: 代码检出成功。"
                }
            }
        }

        // ====================================================================
        //  阶段 3: 运行 API 自动化测试
        // ====================================================================
        stage('Run API Tests') {
            steps {
                echo "INFO: 准备在 Docker 容器 (testenv:3.0-250825) 中执行自动化测试..."
                // 启动容器来运行脚本
                docker.image('testenv:3.0-250825').inside("--volume ${WORKSPACE}:/app --volume ${WORKSPACE}/report:/app/report -w /app") {
                    // 除服务器巡检
                    sh 'python run_main_test.py --clean --type read_yaml login host_os network backup'
                    // sh 'python run_main_test.py --clean --type read_yaml login network backup --report'
                    // 仅测试登录和检查配置文件
                    // sh 'python run_main_test.py --clean --type login read_yaml'
                    // 仅测试主机服务器巡检任务
                    // sh 'python run_main_test.py --clean --type host_os'
                    // 所有任务
                    // sh 'python run_main_test.py --clean'
                }
                echo "SUCCESS: 自动化测试执行完成。"
            }
        }
    }

    // ====================================================================
    //  构建后操作
    // ====================================================================
    post {
        always {
            echo "INFO: 开始执行构建后操作..."
            // 归档 log 文件夹中的所有文件，排除 .gitkeep
            archiveArtifacts artifacts: 'output/log/*', excludes: 'output/log/.gitkeep', allowEmptyArchive: true

            // 生成并展示 Allure 测试报告
            allure includeProperties: false, jdk: '', report: 'output/report/allure-report', results: [[path: 'output/report/allure-results']]
            echo "SUCCESS: 构建后操作完成。"
        }
    }
}
