pipeline {
    // 1. 定义构建环境
    // - 使用官方标准镜像，便于维护
    // - 使用命名数据卷 'maven-m2-cache' 持久化 .m2 仓库，加速后续构建
    agent {
        docker {
            image 'maven:3.9.11-eclipse-temurin-21'
            args '-u root:root -v maven-m2-cache:/root/.m2/repository'
        }
    }

    stages {
        // ====================================================================
        //  阶段 1: 拉取代码
        // ====================================================================
        stage('Checkout') {
            steps {
                echo 'INFO: 开始从 Git 仓库拉取代码 (完整克隆)...'
                // 移除浅克隆，获取完整的 Git 历史记录
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/workbench']],
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-services.git',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                    ]]
                ])
                echo 'SUCCESS: 代码拉取完成。'
            }
        }

        // ====================================================================
        //  阶段 2: 构建
        // ====================================================================
        stage('Build') {
            steps {
                // 优化: 使用 configFileProvider 插件从 Jenkins 全局配置中加载 Maven settings.xml
                configFileProvider([configFile(fileId: 'maven-aliyun-settings', variable: 'MAVEN_SETTINGS')]) {
                    script {
                        echo 'INFO: 成功加载 Jenkins 全局 Maven 配置文件 (ID: maven-aliyun-settings)...'

                        // 设定 MAVEN_OPTS 增加构建内存，提升速度
                        withEnv(['MAVEN_OPTS=-Xmx8g -Xms4g']) {
                            echo "INFO: 使用优化参数 MAVEN_OPTS=${env.MAVEN_OPTS}进行构建..."
                            sh  'mvn -s ${MAVEN_SETTINGS} -T 8 clean install -DskipTests -Dmaven.artifact.threads=8'
                        }
                        echo 'SUCCESS: Maven 构建完成。'
                    }
                }
            }
        }

        // ====================================================================
        //  阶段 3: 生成 Git 日志
        // ====================================================================
        stage('Generate Git Log') {
            steps {
                script {
                    echo 'INFO: 正在生成最近7天的 Git 提交日志...'
                    // 使用三重双引号 """ 来确保内部的 `$` 和 `%` 符号不会被 Groovy 错误解释
                    sh """
                        # 明确设置 LANG 环境变量为支持 UTF-8 的 locale
                        export LANG=C.UTF-8
                        # 为 git 命令设置 safe.directory，防止 Jenkins 报错
                        git config --global --add safe.directory ${env.WORKSPACE}
                        # 导出最近7天且不包含合并提交的日志
                        git log --since="7 days ago" --no-merges --pretty=format:"%h - %an, %ar : %s" > git_commit_log.txt
                    """
                    echo 'SUCCESS: Git 日志生成完成。'
                }
            }
        }

        // ====================================================================
        //  阶段 4: 归档到共享目录
        // ====================================================================
        stage('Archive to Share') {
            steps {
                script {
                    echo "INFO: 开始归档构建产物到共享目录..."
                    def webJar = findFiles(glob: 'opwb-web/target/*.jar')
                    def terminalJar = findFiles(glob: 'opwb-terminal/target/*.jar')
                    if (webJar.size() == 0 || terminalJar.size() == 0) {
                        error "错误：一个或多个构建产物 (*.jar) 未找到，无法归档！"
                    }

                    // 使用 Groovy 生成符合要求的 'yy-MM-dd_HH-mm-ss' 格式时间戳，并指定时区
                    def timestamp = new Date().format('yy-MM-dd_HH-mm-ss', TimeZone.getTimeZone('Asia/Shanghai'))
                    def shareRoot = "/var/jenkins_home/share" // 直接使用 Jenkins 内部路径
                    def targetDir = "${shareRoot}/opwb-service-${timestamp}"

                    sh """
                        set -e
                        echo "INFO: [1/4] 正在创建目标目录: ${targetDir}"
                        mkdir -p "${targetDir}/opwb-web"
                        mkdir -p "${targetDir}/opwb-terminal"

                        echo "INFO: [2/4] 正在拷贝构建产物..."
                        cp "${webJar[0].path}" "${targetDir}/opwb-web/"
                        cp "${terminalJar[0].path}" "${targetDir}/opwb-terminal/"

                        echo "INFO: [3/4] 正在拷贝 Git 日志..."
                        cp git_commit_log.txt "${targetDir}/"

                        echo "INFO: [4/4] 所有操作完成！"

                        # 使用 cat 和 heredoc 来整洁地打印多行成功消息
                        cat <<EOF

========================================================================
✅ 构建产物已成功归档!

   你可以通过以下网络路径从 Windows 访问：
   \\\\\\\\10.189.189.245\\\\share\\\\opwb-service-${timestamp}

   或者先访问 \\\\\\\\10.189.189.245\\\\share 再进入对应目录
========================================================================

EOF
                    """
                }
            }
        }

        // ====================================================================
        //  阶段 5: 使用 Jenkins 原生功能归档 (新增)
        // ====================================================================
        stage('Archive Jenkins Artifacts') {
            steps {
                echo 'INFO: 开始归档构建产物至 Jenkins...'
                // 使用逗号分隔符指定多个文件模式
                archiveArtifacts artifacts: 'opwb-web/target/*.jar, opwb-terminal/target/*.jar, git_commit_log.txt', fingerprint: true, allowEmptyArchive: false
                echo 'SUCCESS: Jenkins 归档完成。'
            }
        }

    }

    post {
        always {
            echo '构建流程结束。'
        }
    }
}
