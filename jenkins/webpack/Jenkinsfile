// Jenkinsfile
pipeline {
    // 1. 定义构建环境：使用我们自己的、预装了所有工具的自定义镜像
    agent {
        docker {
            // 使用你自己构建的、预装了 zip 的镜像
            image 'node:14.15.0'
            // 2. 缓存与权限控制
            // -u root:root : 强制容器以 root 用户运行
            // -v npm-cache... : 持久化 npm 缓存
            // -v webpack-cache... : 持久化 Webpack 构建缓存
            args '-u root:root -v npm-cache:/root/.npm -v webpack-cache:/workspace/node_modules/.cache'
        }
    }

    stages {
        // ====================================================================
        //  阶段：检出代码
        // ====================================================================
        stage('Checkout') {
            steps {
                echo '正在检出代码到工作区根目录...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/shijiaxuan-pool']], // 请根据需要修改分支
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-web.git',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e' // 请确认 Gitee 凭证 ID
                    ]],
                    extensions: [
                        [$class: 'CloneOption', shallow: false, timeout: 60]
                    ]
                ])
            }
        }

        // ====================================================================
        //  阶段：安装依赖
        // ====================================================================
        stage('Install Dependencies') {
            steps {
                echo '正在配置 NPM 使用淘宝镜像源...'
                sh 'npm config set registry https://registry.npmmirror.com'
                
                echo '正在安装 NPM 依赖 (使用 npm ci)...'
                // 优化：换回 npm ci，它在CI环境中通常更快、更可靠。
                // --cache /root/.npm 明确告诉 npm 使用我们挂载的共享缓存卷。
                sh 'npm ci --cache /root/.npm'
                sh 'npm rebuild core-js vue-demi ant-design-vue'
            }
        }

        // ====================================================================
        //  阶段：编译项目
        // ====================================================================
        stage('Build') {
            steps {
                echo '正在清理旧的 dist 目录...'
                sh 'rm -rf dist'

                withEnv(['NODE_OPTIONS=--max-old-space-size=8192']) {
                    echo "正在使用 NODE_OPTIONS=${env.NODE_OPTIONS} 进行编译..."
                    sh 'npm run build'
                }
            }
        }

        // ====================================================================
        //  阶段：打包产物
        // ====================================================================
        stage('Package Artifact') {
            steps {
                echo '正在将 dist 目录打包为 dist.zip...'
                // 进入 dist 目录，直接打包其内容
                dir('dist') {
                    sh 'zip -r ../dist.zip .'
                }
                // 归档到 Jenkins Job 内部，方便追溯
                archiveArtifacts artifacts: 'dist.zip', followSymlinks: false
            }
        }

        // ====================================================================
        //  阶段：归档到共享目录
        // ====================================================================
        stage('Archive to Share') {
            steps {
                script {
                    // 使用 Groovy 来生成时间戳和路径，更稳健
                    def timestamp = new Date().format('yy-MM-dd_HH-mm-ss', TimeZone.getTimeZone('Asia/Shanghai'))
                    def shareRoot = "${env.JENKINS_HOME}/share"
                    def targetDir = "${shareRoot}/${env.JOB_NAME}-${timestamp}"

                    // 执行归档操作
                    sh """
                        set -e
                        echo "正在创建目标目录: ${targetDir}"
                        mkdir -p "${targetDir}"

                        echo "将当前工作区标记为 Git 安全目录..."
                        # 修复：解决 Git 'dubious ownership' 问题
                        git config --global --add safe.directory ${env.WORKSPACE}

                        echo "正在生成 Git 日志..."
                        git log --since="7 days ago" --no-merges --pretty=format:"%h - %an, %ar : %s" > "${targetDir}/git_commit_log.txt"

                        echo "正在拷贝构建产物..."
                        cp "${env.WORKSPACE}/dist.zip" "${targetDir}/"

                        # 使用 cat 和 heredoc 来整洁地打印多行消息
                        cat <<EOF
--------------------------------------------------------
文件已成功归档到目标目录
您现在可以通过以下网络路径从 Windows 访问：
\\\\\\\\10.189.189.245\\\\share\\\\${env.JOB_NAME}-${timestamp}
或者先访问 \\\\\\\\10.189.189.245\\\\share 再进入对应目录
--------------------------------------------------------
EOF
                    """
                }
            }
        }
    }

    post {
        always {
            echo '构建已结束。'
        }
    }
}
