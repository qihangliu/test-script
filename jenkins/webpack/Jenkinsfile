pipeline {
    // ====================================================================
    // 1. 定义构建环境
    // ====================================================================
    agent {
        docker {
            image 'node:14.15.0'
            // 关键：挂载两个命名卷，避免冲突
            // - npm-cache: 用于缓存 npm 下载的包
            // - node-modules-cache: 用于持久化 node_modules 目录（包含 .cache），实现极速增量安装 + 编译缓存
            args '-u root:root -v npm-cache:/root/.npm -v node-modules-cache:/workspace/node_modules --entrypoint='
        }
    }

    stages {
        // ====================================================================
        // 阶段：检出代码
        // ====================================================================
        stage('Checkout') {
            steps {
                echo 'INFO: 正在检出代码 (使用完整克隆)...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/shijiaxuan-pool']],
                    userRemoteConfigs: [[
                        url: 'https://gitee.com/changyunhuizhi/opwb-web.git',
                        credentialsId: 'd5208b73-a80f-403b-a5df-365614d1362e'
                    ]],
                    extensions: []
                ])
            }
        }

        // ====================================================================
        // 阶段：极速增量安装依赖
        // ====================================================================
        stage('Install Dependencies') {
            steps {
                sh '''
                    #!/bin/bash
                    set -e

                    echo "--> INFO: 正在开始极速增量安装..."
                    npm config set registry https://registry.npmmirror.com

                    CURRENT_CHECKSUM=$(md5sum package-lock.json | awk '{ print $1 }')
                    SAVED_CHECKSUM_FILE="node_modules/.lock-checksum"

                    if [ -f "$SAVED_CHECKSUM_FILE" ] && [ "$CURRENT_CHECKSUM" = "$(cat "$SAVED_CHECKSUM_FILE")" ]; then
                        echo "--> 成功: package-lock.json 未发生变化，跳过依赖安装。"
                    else
                        echo "--> INFO: package-lock.json 已发生变化，正在执行增量 'npm install'。"
                        npm install --no-audit --no-fund
                        echo "--> INFO: 正在为 package-lock.json 保存新的校验和。"
                        echo "$CURRENT_CHECKSUM" > "$SAVED_CHECKSUM_FILE"
                    fi
                '''
            }
        }

        // ====================================================================
        // 阶段：编译项目
        // ====================================================================
        stage('Build') {
            steps {
                echo 'INFO: 正在清理旧的构建产物...'
                sh 'rm -rf dist'
                sh 'rm -f dist.zip'

                // --- 注入多线程配置 ---
                script {
                    def originalConfig = readFile('vue.config.js')
                    def injectedCode = """
                    // START: Injected multi-threading config
                    const os = require('os');
                    const isProd = process.env.NODE_ENV === 'production';
                    if (isProd) {
                        console.log('正在为 Babel-loader 注入多线程配置...');
                        config.module
                            .rule('js')
                            .use('cache-loader')
                            .loader('cache-loader')
                            .end()
                            .use('thread-loader')
                            .loader('thread-loader')
                            .options({
                                workers: os.cpus().length - 1,
                                poolTimeout: 2000
                            })
                            .before('babel-loader');
                    }
                    // END: Injected multi-threading config
                    """
                    def modifiedConfig = originalConfig.replaceFirst(
                        'chainWebpack: config => \\{',
                        "chainWebpack: config => {\n${injectedCode}"
                    )
                    writeFile(file: 'vue.config.js', text: modifiedConfig)
                    echo "INFO: 已在内存中修改并写回 vue.config.js。"
                }

                withEnv(['NODE_OPTIONS=--max-old-space-size=8192', 'BROWSERSLIST_IGNORE_OLD_DATA=true', 'BROWSERSLIST_UPDATE=false']) {
                    echo "INFO: 正在使用 NODE_OPTIONS=${env.NODE_OPTIONS} 进行编译..."
                    sh 'NODE_ENV=production npm run build -- --no-lint'
                }
            }
        }

        // ====================================================================
        // 阶段：打包产物
        // ====================================================================
        stage('Package Artifact') {
            steps {
                echo 'INFO: 正在将 dist 目录打包为 dist.zip...'
                dir('dist') {
                    sh 'zip -qr ../dist.zip .'
                }
                archiveArtifacts artifacts: 'dist.zip', followSymlinks: false
            }
        }

        // ====================================================================
        // 阶段：归档到共享目录
        // ====================================================================
        stage('Archive to Share') {
            steps {
                script {
                    def timestamp = new Date().format('yy-MM-dd_HH-mm-ss', TimeZone.getTimeZone('Asia/Shanghai'))
                    def shareRoot = "${env.JENKINS_HOME}/share"
                    def targetDir = "${shareRoot}/${env.JOB_NAME}-${timestamp}"

                    sh """
                        set -e
                        echo "正在创建目标目录: ${targetDir}"
                        mkdir -p "${targetDir}"

                        echo "将当前工作区标记为 Git 安全目录..."
                        git config --global --add safe.directory ${env.WORKSPACE}

                        echo "正在生成 Git 日志..."
                        git log --since="7 days ago" --no-merges --pretty=format:"%h - %an, %ar : %s" > "${targetDir}/git_commit_log.txt"

                        echo "正在拷贝构建产物..."
                        cp "${env.WORKSPACE}/dist.zip" "${targetDir}/"

                        cat <<EOF
--------------------------------------------------------
文件已成功归档到目标目录
您现在可以通过以下网络路径从 Windows 访问：
\\\\\\\\10.189.189.245\\\\share\\\\${env.JOB_NAME}-${timestamp}
或者先访问 \\\\\\\\10.189.189.245\\\\share 再进入对应目录
--------------------------------------------------------
EOF
                    """
                }
            }
        }
    }

    post {
        always {
            echo '构建流程已结束。'
        }
    }
}
